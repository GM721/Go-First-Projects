package storage

import (
	"database/sql"
	"fmt"
	"sync"

	_ "github.com/lib/pq"
)

type StorageAccount struct {
	DB *sql.DB
	MU sync.Mutex
}

func New(storagePath string) *StorageAccount {

	db, err := sql.Open("postgres", storagePath)
	if err != nil {
		panic(err)
	}

	rows, err := db.Query("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='accounts'")
	if err != nil {
		panic(err)
	}
	defer rows.Close()

	if !rows.Next() {
		_, err = db.Exec("create table accounts (ID integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, Deposit float)")
		if err != nil {
			panic(err)
		}
	}

	return &StorageAccount{DB: db}
}

func (storage *StorageAccount) CreateAccount(deposit float32) (uint, error) {
	var id uint
	err := storage.DB.QueryRow("insert into accounts (deposit) values ($1) RETURNING ID", deposit).Scan(&id)
	if err != nil {
		fmt.Println(err)
		return 0, err
	}
	return id, nil
}

func (storage *StorageAccount) GetDeposit(id uint) (float32, error) {

	rows, err := storage.DB.Query("select deposit from accounts where id = $1", id)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return 0, err
	}

	var deposit float32
	rows.Next()
	err = rows.Scan(&deposit)
	if err != nil {
		fmt.Println(err)
		return 0, err
	}

	return deposit, nil
}

func (storage *StorageAccount) IncreaseDeposit(id uint, deposit float32) bool {
	_, err := storage.DB.Exec("update accounts set Deposit = Deposit + $1 WHERE ID = $2", deposit, id)
	if err != nil {
		fmt.Println(err)
		return false
	}
	return true
}

func (storage *StorageAccount) DecreaseDeposit(id uint, deposit float32) bool {
	_, err := storage.DB.Exec("update accounts set Deposit = Deposit - $1 WHERE ID = $2", deposit, id)
	if err != nil {
		fmt.Println(err)
		return false
	}
	return true
}
